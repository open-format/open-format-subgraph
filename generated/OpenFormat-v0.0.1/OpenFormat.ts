// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class ApprovedDepositExtensionSet extends ethereum.Event {
  get params(): ApprovedDepositExtensionSet__Params {
    return new ApprovedDepositExtensionSet__Params(this);
  }
}

export class ApprovedDepositExtensionSet__Params {
  _event: ApprovedDepositExtensionSet;

  constructor(event: ApprovedDepositExtensionSet) {
    this._event = event;
  }

  get contractAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ApprovedMintingExtensionSet extends ethereum.Event {
  get params(): ApprovedMintingExtensionSet__Params {
    return new ApprovedMintingExtensionSet__Params(this);
  }
}

export class ApprovedMintingExtensionSet__Params {
  _event: ApprovedMintingExtensionSet;

  constructor(event: ApprovedMintingExtensionSet) {
    this._event = event;
  }

  get contractAddresss(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ApprovedRoyaltyExtensionSet extends ethereum.Event {
  get params(): ApprovedRoyaltyExtensionSet__Params {
    return new ApprovedRoyaltyExtensionSet__Params(this);
  }
}

export class ApprovedRoyaltyExtensionSet__Params {
  _event: ApprovedRoyaltyExtensionSet;

  constructor(event: ApprovedRoyaltyExtensionSet) {
    this._event = event;
  }

  get contractAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class CommissionPaid extends ethereum.Event {
  get params(): CommissionPaid__Params {
    return new CommissionPaid__Params(this);
  }
}

export class CommissionPaid__Params {
  _event: CommissionPaid;

  constructor(event: CommissionPaid) {
    this._event = event;
  }

  get commissionType(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Created extends ethereum.Event {
  get params(): Created__Params {
    return new Created__Params(this);
  }
}

export class Created__Params {
  _event: Created;

  constructor(event: Created) {
    this._event = event;
  }

  get creator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get metadataURI(): string {
    return this._event.parameters[1].value.toString();
  }

  get symbol(): string {
    return this._event.parameters[2].value.toString();
  }

  get name(): string {
    return this._event.parameters[3].value.toString();
  }

  get maxSupply(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get mintingPrice(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class ERC20PaymentReleased extends ethereum.Event {
  get params(): ERC20PaymentReleased__Params {
    return new ERC20PaymentReleased__Params(this);
  }
}

export class ERC20PaymentReleased__Params {
  _event: ERC20PaymentReleased;

  constructor(event: ERC20PaymentReleased) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ERC20TokenBalanceWithdrawn extends ethereum.Event {
  get params(): ERC20TokenBalanceWithdrawn__Params {
    return new ERC20TokenBalanceWithdrawn__Params(this);
  }
}

export class ERC20TokenBalanceWithdrawn__Params {
  _event: ERC20TokenBalanceWithdrawn;

  constructor(event: ERC20TokenBalanceWithdrawn) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ERC20TotalDepositedAmountUpdated extends ethereum.Event {
  get params(): ERC20TotalDepositedAmountUpdated__Params {
    return new ERC20TotalDepositedAmountUpdated__Params(this);
  }
}

export class ERC20TotalDepositedAmountUpdated__Params {
  _event: ERC20TotalDepositedAmountUpdated;

  constructor(event: ERC20TotalDepositedAmountUpdated) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class MaxSupplySet extends ethereum.Event {
  get params(): MaxSupplySet__Params {
    return new MaxSupplySet__Params(this);
  }
}

export class MaxSupplySet__Params {
  _event: MaxSupplySet;

  constructor(event: MaxSupplySet) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Minted extends ethereum.Event {
  get params(): Minted__Params {
    return new Minted__Params(this);
  }
}

export class Minted__Params {
  _event: Minted;

  constructor(event: Minted) {
    this._event = event;
  }

  get newTokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class MintingPriceSet extends ethereum.Event {
  get params(): MintingPriceSet__Params {
    return new MintingPriceSet__Params(this);
  }
}

export class MintingPriceSet__Params {
  _event: MintingPriceSet;

  constructor(event: MintingPriceSet) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PausedStateSet extends ethereum.Event {
  get params(): PausedStateSet__Params {
    return new PausedStateSet__Params(this);
  }
}

export class PausedStateSet__Params {
  _event: PausedStateSet;

  constructor(event: PausedStateSet) {
    this._event = event;
  }

  get isPaused(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class PayeeAdded extends ethereum.Event {
  get params(): PayeeAdded__Params {
    return new PayeeAdded__Params(this);
  }
}

export class PayeeAdded__Params {
  _event: PayeeAdded;

  constructor(event: PayeeAdded) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get shares(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class PayeeRemoved extends ethereum.Event {
  get params(): PayeeRemoved__Params {
    return new PayeeRemoved__Params(this);
  }
}

export class PayeeRemoved__Params {
  _event: PayeeRemoved;

  constructor(event: PayeeRemoved) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get shares(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class PaymentReceived extends ethereum.Event {
  get params(): PaymentReceived__Params {
    return new PaymentReceived__Params(this);
  }
}

export class PaymentReceived__Params {
  _event: PaymentReceived;

  constructor(event: PaymentReceived) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class PaymentReleased extends ethereum.Event {
  get params(): PaymentReleased__Params {
    return new PaymentReleased__Params(this);
  }
}

export class PaymentReleased__Params {
  _event: PaymentReleased;

  constructor(event: PaymentReleased) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class PrimaryCommissionSet extends ethereum.Event {
  get params(): PrimaryCommissionSet__Params {
    return new PrimaryCommissionSet__Params(this);
  }
}

export class PrimaryCommissionSet__Params {
  _event: PrimaryCommissionSet;

  constructor(event: PrimaryCommissionSet) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class RoyaltiesSet extends ethereum.Event {
  get params(): RoyaltiesSet__Params {
    return new RoyaltiesSet__Params(this);
  }
}

export class RoyaltiesSet__Params {
  _event: RoyaltiesSet;

  constructor(event: RoyaltiesSet) {
    this._event = event;
  }

  get receiver(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get percentage(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RoyaltyPaid extends ethereum.Event {
  get params(): RoyaltyPaid__Params {
    return new RoyaltyPaid__Params(this);
  }
}

export class RoyaltyPaid__Params {
  _event: RoyaltyPaid;

  constructor(event: RoyaltyPaid) {
    this._event = event;
  }

  get recipient(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SalePriceSet extends ethereum.Event {
  get params(): SalePriceSet__Params {
    return new SalePriceSet__Params(this);
  }
}

export class SalePriceSet__Params {
  _event: SalePriceSet;

  constructor(event: SalePriceSet) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get salePrice(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SecondaryCommissionSet extends ethereum.Event {
  get params(): SecondaryCommissionSet__Params {
    return new SecondaryCommissionSet__Params(this);
  }
}

export class SecondaryCommissionSet__Params {
  _event: SecondaryCommissionSet;

  constructor(event: SecondaryCommissionSet) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ShareIncomeWithHoldersSet extends ethereum.Event {
  get params(): ShareIncomeWithHoldersSet__Params {
    return new ShareIncomeWithHoldersSet__Params(this);
  }
}

export class ShareIncomeWithHoldersSet__Params {
  _event: ShareIncomeWithHoldersSet;

  constructor(event: ShareIncomeWithHoldersSet) {
    this._event = event;
  }

  get state(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class SharesAllocated extends ethereum.Event {
  get params(): SharesAllocated__Params {
    return new SharesAllocated__Params(this);
  }
}

export class SharesAllocated__Params {
  _event: SharesAllocated;

  constructor(event: SharesAllocated) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Sold extends ethereum.Event {
  get params(): Sold__Params {
    return new Sold__Params(this);
  }
}

export class Sold__Params {
  _event: Sold;

  constructor(event: Sold) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get oldOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get salePrice(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class TokenBalanceWithdrawn extends ethereum.Event {
  get params(): TokenBalanceWithdrawn__Params {
    return new TokenBalanceWithdrawn__Params(this);
  }
}

export class TokenBalanceWithdrawn__Params {
  _event: TokenBalanceWithdrawn;

  constructor(event: TokenBalanceWithdrawn) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TotalDepositedAmountUpdated extends ethereum.Event {
  get params(): TotalDepositedAmountUpdated__Params {
    return new TotalDepositedAmountUpdated__Params(this);
  }
}

export class TotalDepositedAmountUpdated__Params {
  _event: TotalDepositedAmountUpdated;

  constructor(event: TotalDepositedAmountUpdated) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OpenFormat__royaltyInfoResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class OpenFormat extends ethereum.SmartContract {
  static bind(address: Address): OpenFormat {
    return new OpenFormat("OpenFormat", address);
  }

  _shares(param0: Address): BigInt {
    let result = super.call("_shares", "_shares(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try__shares(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_shares", "_shares(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approvedDepositExtension(): Address {
    let result = super.call(
      "approvedDepositExtension",
      "approvedDepositExtension():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_approvedDepositExtension(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "approvedDepositExtension",
      "approvedDepositExtension():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  approvedMintingExtension(): Address {
    let result = super.call(
      "approvedMintingExtension",
      "approvedMintingExtension():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_approvedMintingExtension(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "approvedMintingExtension",
      "approvedMintingExtension():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  creatorOf(tokenId: BigInt): Address {
    let result = super.call("creatorOf", "creatorOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_creatorOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("creatorOf", "creatorOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getMaxSupply(): BigInt {
    let result = super.call("getMaxSupply", "getMaxSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getMaxSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getMaxSupply", "getMaxSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOwner(): Address {
    let result = super.call("getOwner", "getOwner():(address)", []);

    return result[0].toAddress();
  }

  try_getOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("getOwner", "getOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPrimaryCommissionPct(): BigInt {
    let result = super.call(
      "getPrimaryCommissionPct",
      "getPrimaryCommissionPct():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getPrimaryCommissionPct(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPrimaryCommissionPct",
      "getPrimaryCommissionPct():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSecondaryCommissionPct(): BigInt {
    let result = super.call(
      "getSecondaryCommissionPct",
      "getSecondaryCommissionPct():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getSecondaryCommissionPct(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSecondaryCommissionPct",
      "getSecondaryCommissionPct():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSingleTokenBalance(tokenId: BigInt): BigInt {
    let result = super.call(
      "getSingleTokenBalance",
      "getSingleTokenBalance(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return result[0].toBigInt();
  }

  try_getSingleTokenBalance(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSingleTokenBalance",
      "getSingleTokenBalance(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSingleTokenBalance1(token: Address, tokenId: BigInt): BigInt {
    let result = super.call(
      "getSingleTokenBalance",
      "getSingleTokenBalance(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );

    return result[0].toBigInt();
  }

  try_getSingleTokenBalance1(
    token: Address,
    tokenId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSingleTokenBalance",
      "getSingleTokenBalance(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTokenSalePrice(tokenId: BigInt): BigInt {
    let result = super.call(
      "getTokenSalePrice",
      "getTokenSalePrice(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return result[0].toBigInt();
  }

  try_getTokenSalePrice(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTokenSalePrice",
      "getTokenSalePrice(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalSupply(): BigInt {
    let result = super.call("getTotalSupply", "getTotalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getTotalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalSupply",
      "getTotalSupply():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  metadataURI(): string {
    let result = super.call("metadataURI", "metadataURI():(string)", []);

    return result[0].toString();
  }

  try_metadataURI(): ethereum.CallResult<string> {
    let result = super.tryCall("metadataURI", "metadataURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  mintingPrice(): BigInt {
    let result = super.call("mintingPrice", "mintingPrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_mintingPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("mintingPrice", "mintingPrice():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  payee(index: BigInt): Address {
    let result = super.call("payee", "payee(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return result[0].toAddress();
  }

  try_payee(index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("payee", "payee(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  primaryCommissionPct(): BigInt {
    let result = super.call(
      "primaryCommissionPct",
      "primaryCommissionPct():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_primaryCommissionPct(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "primaryCommissionPct",
      "primaryCommissionPct():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  released(token: Address, account: Address): BigInt {
    let result = super.call("released", "released(address,address):(uint256)", [
      ethereum.Value.fromAddress(token),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_released(token: Address, account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "released",
      "released(address,address):(uint256)",
      [ethereum.Value.fromAddress(token), ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  released1(account: Address): BigInt {
    let result = super.call("released", "released(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_released1(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("released", "released(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  royaltyInfo(param0: BigInt, value: BigInt): OpenFormat__royaltyInfoResult {
    let result = super.call(
      "royaltyInfo",
      "royaltyInfo(uint256,uint256):(address,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(value)
      ]
    );

    return new OpenFormat__royaltyInfoResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_royaltyInfo(
    param0: BigInt,
    value: BigInt
  ): ethereum.CallResult<OpenFormat__royaltyInfoResult> {
    let result = super.tryCall(
      "royaltyInfo",
      "royaltyInfo(uint256,uint256):(address,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(value)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OpenFormat__royaltyInfoResult(
        value[0].toAddress(),
        value[1].toBigInt()
      )
    );
  }

  secondaryCommissionPct(): BigInt {
    let result = super.call(
      "secondaryCommissionPct",
      "secondaryCommissionPct():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_secondaryCommissionPct(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "secondaryCommissionPct",
      "secondaryCommissionPct():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  shareIncomeWithHolders(): boolean {
    let result = super.call(
      "shareIncomeWithHolders",
      "shareIncomeWithHolders():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_shareIncomeWithHolders(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "shareIncomeWithHolders",
      "shareIncomeWithHolders():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  shares(account: Address): BigInt {
    let result = super.call("shares", "shares(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_shares(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("shares", "shares(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenByIndex(index: BigInt): BigInt {
    let result = super.call("tokenByIndex", "tokenByIndex(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return result[0].toBigInt();
  }

  try_tokenByIndex(index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenByIndex",
      "tokenByIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenOfOwnerByIndex(owner: Address, index: BigInt): BigInt {
    let result = super.call(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toBigInt();
  }

  try_tokenOfOwnerByIndex(
    owner: Address,
    index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalDepositedAmount(): BigInt {
    let result = super.call(
      "totalDepositedAmount",
      "totalDepositedAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalDepositedAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalDepositedAmount",
      "totalDepositedAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalDepositedReleased(): BigInt {
    let result = super.call(
      "totalDepositedReleased",
      "totalDepositedReleased():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalDepositedReleased(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalDepositedReleased",
      "totalDepositedReleased():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalReleased(token: Address): BigInt {
    let result = super.call(
      "totalReleased",
      "totalReleased(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );

    return result[0].toBigInt();
  }

  try_totalReleased(token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalReleased",
      "totalReleased(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalReleased1(): BigInt {
    let result = super.call("totalReleased", "totalReleased():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalReleased1(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalReleased",
      "totalReleased():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get name_(): string {
    return this._call.inputValues[0].value.toString();
  }

  get symbol_(): string {
    return this._call.inputValues[1].value.toString();
  }

  get metadataURI_(): string {
    return this._call.inputValues[2].value.toString();
  }

  get maxSupply_(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get mintingPrice_(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AllocateSharesCall extends ethereum.Call {
  get inputs(): AllocateSharesCall__Inputs {
    return new AllocateSharesCall__Inputs(this);
  }

  get outputs(): AllocateSharesCall__Outputs {
    return new AllocateSharesCall__Outputs(this);
  }
}

export class AllocateSharesCall__Inputs {
  _call: AllocateSharesCall;

  constructor(call: AllocateSharesCall) {
    this._call = call;
  }

  get accounts(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get shares_(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class AllocateSharesCall__Outputs {
  _call: AllocateSharesCall;

  constructor(call: AllocateSharesCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class BuyCall extends ethereum.Call {
  get inputs(): BuyCall__Inputs {
    return new BuyCall__Inputs(this);
  }

  get outputs(): BuyCall__Outputs {
    return new BuyCall__Outputs(this);
  }
}

export class BuyCall__Inputs {
  _call: BuyCall;

  constructor(call: BuyCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get commissionAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class BuyCall__Outputs {
  _call: BuyCall;

  constructor(call: BuyCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class Buy1Call extends ethereum.Call {
  get inputs(): Buy1Call__Inputs {
    return new Buy1Call__Inputs(this);
  }

  get outputs(): Buy1Call__Outputs {
    return new Buy1Call__Outputs(this);
  }
}

export class Buy1Call__Inputs {
  _call: Buy1Call;

  constructor(call: Buy1Call) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class Buy1Call__Outputs {
  _call: Buy1Call;

  constructor(call: Buy1Call) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class Deposit1Call extends ethereum.Call {
  get inputs(): Deposit1Call__Inputs {
    return new Deposit1Call__Inputs(this);
  }

  get outputs(): Deposit1Call__Outputs {
    return new Deposit1Call__Outputs(this);
  }
}

export class Deposit1Call__Inputs {
  _call: Deposit1Call;

  constructor(call: Deposit1Call) {
    this._call = call;
  }
}

export class Deposit1Call__Outputs {
  _call: Deposit1Call;

  constructor(call: Deposit1Call) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get newTokenId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class Mint1Call extends ethereum.Call {
  get inputs(): Mint1Call__Inputs {
    return new Mint1Call__Inputs(this);
  }

  get outputs(): Mint1Call__Outputs {
    return new Mint1Call__Outputs(this);
  }
}

export class Mint1Call__Inputs {
  _call: Mint1Call;

  constructor(call: Mint1Call) {
    this._call = call;
  }

  get commissionAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class Mint1Call__Outputs {
  _call: Mint1Call;

  constructor(call: Mint1Call) {
    this._call = call;
  }

  get newTokenId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ReleaseCall extends ethereum.Call {
  get inputs(): ReleaseCall__Inputs {
    return new ReleaseCall__Inputs(this);
  }

  get outputs(): ReleaseCall__Outputs {
    return new ReleaseCall__Outputs(this);
  }
}

export class ReleaseCall__Inputs {
  _call: ReleaseCall;

  constructor(call: ReleaseCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ReleaseCall__Outputs {
  _call: ReleaseCall;

  constructor(call: ReleaseCall) {
    this._call = call;
  }
}

export class Release1Call extends ethereum.Call {
  get inputs(): Release1Call__Inputs {
    return new Release1Call__Inputs(this);
  }

  get outputs(): Release1Call__Outputs {
    return new Release1Call__Outputs(this);
  }
}

export class Release1Call__Inputs {
  _call: Release1Call;

  constructor(call: Release1Call) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class Release1Call__Outputs {
  _call: Release1Call;

  constructor(call: Release1Call) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetApprovedDepositExtensionCall extends ethereum.Call {
  get inputs(): SetApprovedDepositExtensionCall__Inputs {
    return new SetApprovedDepositExtensionCall__Inputs(this);
  }

  get outputs(): SetApprovedDepositExtensionCall__Outputs {
    return new SetApprovedDepositExtensionCall__Outputs(this);
  }
}

export class SetApprovedDepositExtensionCall__Inputs {
  _call: SetApprovedDepositExtensionCall;

  constructor(call: SetApprovedDepositExtensionCall) {
    this._call = call;
  }

  get contractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get holderPct(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetApprovedDepositExtensionCall__Outputs {
  _call: SetApprovedDepositExtensionCall;

  constructor(call: SetApprovedDepositExtensionCall) {
    this._call = call;
  }
}

export class SetApprovedMintingExtensionCall extends ethereum.Call {
  get inputs(): SetApprovedMintingExtensionCall__Inputs {
    return new SetApprovedMintingExtensionCall__Inputs(this);
  }

  get outputs(): SetApprovedMintingExtensionCall__Outputs {
    return new SetApprovedMintingExtensionCall__Outputs(this);
  }
}

export class SetApprovedMintingExtensionCall__Inputs {
  _call: SetApprovedMintingExtensionCall;

  constructor(call: SetApprovedMintingExtensionCall) {
    this._call = call;
  }

  get contractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetApprovedMintingExtensionCall__Outputs {
  _call: SetApprovedMintingExtensionCall;

  constructor(call: SetApprovedMintingExtensionCall) {
    this._call = call;
  }
}

export class SetMaxSupplyCall extends ethereum.Call {
  get inputs(): SetMaxSupplyCall__Inputs {
    return new SetMaxSupplyCall__Inputs(this);
  }

  get outputs(): SetMaxSupplyCall__Outputs {
    return new SetMaxSupplyCall__Outputs(this);
  }
}

export class SetMaxSupplyCall__Inputs {
  _call: SetMaxSupplyCall;

  constructor(call: SetMaxSupplyCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaxSupplyCall__Outputs {
  _call: SetMaxSupplyCall;

  constructor(call: SetMaxSupplyCall) {
    this._call = call;
  }
}

export class SetMintingPriceCall extends ethereum.Call {
  get inputs(): SetMintingPriceCall__Inputs {
    return new SetMintingPriceCall__Inputs(this);
  }

  get outputs(): SetMintingPriceCall__Outputs {
    return new SetMintingPriceCall__Outputs(this);
  }
}

export class SetMintingPriceCall__Inputs {
  _call: SetMintingPriceCall;

  constructor(call: SetMintingPriceCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMintingPriceCall__Outputs {
  _call: SetMintingPriceCall;

  constructor(call: SetMintingPriceCall) {
    this._call = call;
  }
}

export class SetPrimaryCommissionPctCall extends ethereum.Call {
  get inputs(): SetPrimaryCommissionPctCall__Inputs {
    return new SetPrimaryCommissionPctCall__Inputs(this);
  }

  get outputs(): SetPrimaryCommissionPctCall__Outputs {
    return new SetPrimaryCommissionPctCall__Outputs(this);
  }
}

export class SetPrimaryCommissionPctCall__Inputs {
  _call: SetPrimaryCommissionPctCall;

  constructor(call: SetPrimaryCommissionPctCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetPrimaryCommissionPctCall__Outputs {
  _call: SetPrimaryCommissionPctCall;

  constructor(call: SetPrimaryCommissionPctCall) {
    this._call = call;
  }
}

export class SetRoyaltiesCall extends ethereum.Call {
  get inputs(): SetRoyaltiesCall__Inputs {
    return new SetRoyaltiesCall__Inputs(this);
  }

  get outputs(): SetRoyaltiesCall__Outputs {
    return new SetRoyaltiesCall__Outputs(this);
  }
}

export class SetRoyaltiesCall__Inputs {
  _call: SetRoyaltiesCall;

  constructor(call: SetRoyaltiesCall) {
    this._call = call;
  }

  get royaltyReceiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get royaltiesPct(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetRoyaltiesCall__Outputs {
  _call: SetRoyaltiesCall;

  constructor(call: SetRoyaltiesCall) {
    this._call = call;
  }
}

export class SetSecondaryCommissionPctCall extends ethereum.Call {
  get inputs(): SetSecondaryCommissionPctCall__Inputs {
    return new SetSecondaryCommissionPctCall__Inputs(this);
  }

  get outputs(): SetSecondaryCommissionPctCall__Outputs {
    return new SetSecondaryCommissionPctCall__Outputs(this);
  }
}

export class SetSecondaryCommissionPctCall__Inputs {
  _call: SetSecondaryCommissionPctCall;

  constructor(call: SetSecondaryCommissionPctCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetSecondaryCommissionPctCall__Outputs {
  _call: SetSecondaryCommissionPctCall;

  constructor(call: SetSecondaryCommissionPctCall) {
    this._call = call;
  }
}

export class SetShareIncomeWithHoldersCall extends ethereum.Call {
  get inputs(): SetShareIncomeWithHoldersCall__Inputs {
    return new SetShareIncomeWithHoldersCall__Inputs(this);
  }

  get outputs(): SetShareIncomeWithHoldersCall__Outputs {
    return new SetShareIncomeWithHoldersCall__Outputs(this);
  }
}

export class SetShareIncomeWithHoldersCall__Inputs {
  _call: SetShareIncomeWithHoldersCall;

  constructor(call: SetShareIncomeWithHoldersCall) {
    this._call = call;
  }

  get state(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetShareIncomeWithHoldersCall__Outputs {
  _call: SetShareIncomeWithHoldersCall;

  constructor(call: SetShareIncomeWithHoldersCall) {
    this._call = call;
  }
}

export class SetTokenSalePriceCall extends ethereum.Call {
  get inputs(): SetTokenSalePriceCall__Inputs {
    return new SetTokenSalePriceCall__Inputs(this);
  }

  get outputs(): SetTokenSalePriceCall__Outputs {
    return new SetTokenSalePriceCall__Outputs(this);
  }
}

export class SetTokenSalePriceCall__Inputs {
  _call: SetTokenSalePriceCall;

  constructor(call: SetTokenSalePriceCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get salePrice(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetTokenSalePriceCall__Outputs {
  _call: SetTokenSalePriceCall;

  constructor(call: SetTokenSalePriceCall) {
    this._call = call;
  }
}

export class TogglePausedStateCall extends ethereum.Call {
  get inputs(): TogglePausedStateCall__Inputs {
    return new TogglePausedStateCall__Inputs(this);
  }

  get outputs(): TogglePausedStateCall__Outputs {
    return new TogglePausedStateCall__Outputs(this);
  }
}

export class TogglePausedStateCall__Inputs {
  _call: TogglePausedStateCall;

  constructor(call: TogglePausedStateCall) {
    this._call = call;
  }
}

export class TogglePausedStateCall__Outputs {
  _call: TogglePausedStateCall;

  constructor(call: TogglePausedStateCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class Withdraw1Call extends ethereum.Call {
  get inputs(): Withdraw1Call__Inputs {
    return new Withdraw1Call__Inputs(this);
  }

  get outputs(): Withdraw1Call__Outputs {
    return new Withdraw1Call__Outputs(this);
  }
}

export class Withdraw1Call__Inputs {
  _call: Withdraw1Call;

  constructor(call: Withdraw1Call) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class Withdraw1Call__Outputs {
  _call: Withdraw1Call;

  constructor(call: Withdraw1Call) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
